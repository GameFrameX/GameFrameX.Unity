
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using LuBan.Runtime;
using GameFrameX.Config;
using SimpleJSON;

namespace Hotfix.Config.Tables
{
    public sealed partial class AchievementConfig : LuBan.Runtime.BeanBase
    {
        public AchievementConfig(int Id, int Image, string Name, string AchievementContent, string LockText, System.Collections.Generic.List<int> AchievementUnlockCondition) 
        {
            this.Id = Id;
            this.Image = Image;
            this.Name = Name;
            this.AchievementContent = AchievementContent;
            this.LockText = LockText;
            this.AchievementUnlockCondition = AchievementUnlockCondition;
            PostInit();
        }

        public AchievementConfig(JSONNode _buf)
        {
            { if(!_buf["id"].IsNumber) { throw new SerializationException(); }  Id = _buf["id"]; }
            { if(!_buf["image"].IsNumber) { throw new SerializationException(); }  Image = _buf["image"]; }
            { if(!_buf["name"].IsString) { throw new SerializationException(); }  Name = _buf["name"]; }
            { if(!_buf["achievement_content"].IsString) { throw new SerializationException(); }  AchievementContent = _buf["achievement_content"]; }
            { if(!_buf["LockText"].IsString) { throw new SerializationException(); }  LockText = _buf["LockText"]; }
            { var __json0 = _buf["achievement_unlock_condition"]; if(!__json0.IsArray) { throw new SerializationException(); } AchievementUnlockCondition = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  AchievementUnlockCondition.Add(__v0); }   }

            // Localization Key Begin
            Name_Localization_Key = Name;
            AchievementContent_Localization_Key = AchievementContent;
            LockText_Localization_Key = LockText;
            // Localization Key End
            PostInit();
        }

        public static AchievementConfig DeserializeAchievementConfig(JSONNode _buf)
        {
            return new Tables.AchievementConfig(_buf);
        }

        /// <summary>
        /// ID
        /// </summary>
        public int Id { private set; get; }
        /// <summary>
        /// 成就对应的图标id
        /// </summary>
        public int Image { private set; get; }
        /// <summary>
        /// 成就Key
        /// </summary>
        public string Name { private set; get; }
        /// <summary>
        /// 成就Key 的多语言Key
        /// </summary>
        private readonly string Name_Localization_Key;
        /// <summary>
        /// 成就内容Key
        /// </summary>
        public string AchievementContent { private set; get; }
        /// <summary>
        /// 成就内容Key 的多语言Key
        /// </summary>
        private readonly string AchievementContent_Localization_Key;
        /// <summary>
        /// 未解锁文字key
        /// </summary>
        public string LockText { private set; get; }
        /// <summary>
        /// 未解锁文字key 的多语言Key
        /// </summary>
        private readonly string LockText_Localization_Key;
        /// <summary>
        /// 成就解锁条件
        /// </summary>
        public System.Collections.Generic.List<int> AchievementUnlockCondition { private set; get; }
        public const int __ID__ = -1961757688;
        public override int GetTypeId() => __ID__;

        public  void ResolveRef(TablesComponent tables)
        {
            
            
            
            
            
            
        }

        public void TranslateText(System.Func<string, string, string> translator)
        {
            Name = translator(Name_Localization_Key, Name);
            AchievementContent = translator(AchievementContent_Localization_Key, AchievementContent);
            LockText = translator(LockText_Localization_Key, LockText);
        }

        public override string ToString()
        {
            return "{ "
            + "id:" + Id + ","
            + "image:" + Image + ","
            + "name:" + Name + ","
            + "achievementContent:" + AchievementContent + ","
            + "LockText:" + LockText + ","
            + "achievementUnlockCondition:" + StringUtil.CollectionToString(AchievementUnlockCondition) + ","
            + "}";
        }

        partial void PostInit();
    }
}
