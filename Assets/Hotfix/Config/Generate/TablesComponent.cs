
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using LuBan.Runtime;
using GameFrameX.Config.Runtime;
using SimpleJSON;

namespace Hotfix.Config
{
    public partial class TablesComponent
    {

        internal Local.TbLocalization TbLocalization { private set; get; }

        internal Tables.TbAchievementConfig TbAchievementConfig { private set; get; }

        internal Tables.TbItemConfig TbItemConfig { private set; get; }

        internal Tables.TbSoundsConfig TbSoundsConfig { private set; get; }

        private ConfigComponent m_ConfigComponent;

        public void Init(ConfigComponent configComponent)
        {
            m_ConfigComponent = configComponent;
            configComponent.RemoveAllConfigs();
        }

        /// <summary>
        /// 是否加载完成
        /// </summary>
        public bool IsLoaded { get; private set; }

        /// <summary>
        /// 异步加载配置文件
        /// </summary>
        /// <param name="loader">加载器</param>
        public async System.Threading.Tasks.Task LoadAsync(System.Func<string, System.Threading.Tasks.Task<JSONNode>> loader)
        {
            if (IsLoaded)
            {
                return;
            }
            IsLoaded = false;
            m_ConfigComponent.RemoveAllConfigs();
            var loadTasks = new System.Collections.Generic.List<System.Threading.Tasks.Task>();
    
            TbLocalization = new Local.TbLocalization(() => loader("local_tblocalization"));
            loadTasks.Add(TbLocalization.LoadAsync());
            m_ConfigComponent.Add(nameof(Local.TbLocalization), TbLocalization);

            TbAchievementConfig = new Tables.TbAchievementConfig(() => loader("tables_tbachievementconfig"));
            loadTasks.Add(TbAchievementConfig.LoadAsync());
            m_ConfigComponent.Add(nameof(Tables.TbAchievementConfig), TbAchievementConfig);

            TbItemConfig = new Tables.TbItemConfig(() => loader("tables_tbitemconfig"));
            loadTasks.Add(TbItemConfig.LoadAsync());
            m_ConfigComponent.Add(nameof(Tables.TbItemConfig), TbItemConfig);

            TbSoundsConfig = new Tables.TbSoundsConfig(() => loader("tables_tbsoundsconfig"));
            loadTasks.Add(TbSoundsConfig.LoadAsync());
            m_ConfigComponent.Add(nameof(Tables.TbSoundsConfig), TbSoundsConfig);

    
            await System.Threading.Tasks.Task.WhenAll(loadTasks);
    
            Refresh();
            IsLoaded = true;
        }

        /// <summary>
        /// 设置本地化的适配器
        /// </summary>
        /// <param name="translator">适配器对象</param>
        /// <exception cref="InvalidOperationException">如果未加载完成将抛出此异常</exception>
        public void SetTranslateText(System.Func<string, string, string> translator)
        {
            if (IsLoaded == false)
            {
                throw new InvalidOperationException("Table is not loaded!");
            }
            TbLocalization.TranslateText(translator);
            TbAchievementConfig.TranslateText(translator);
            TbItemConfig.TranslateText(translator);
            TbSoundsConfig.TranslateText(translator);
        }

        private void ResolveRef()
        {
            TbLocalization.ResolveRef(this);
            TbAchievementConfig.ResolveRef(this);
            TbItemConfig.ResolveRef(this);
            TbSoundsConfig.ResolveRef(this);
        }
    
        public void Refresh()
        {
            PostInit();
            ResolveRef();
        }
    
        partial void PostInit();
    }
}
